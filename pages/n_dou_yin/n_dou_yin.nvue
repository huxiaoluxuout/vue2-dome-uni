<template>

  <view class="page-swiper">
    <swiper class="content-wrapper" :render-whole="true" :autoplay="false" :circular="false"
            :disable-touch="disableTouch" vertical easing-function="easeInOutCubic"
            @change="swiperChanged" @animationfinish="animationfinish">

      <template v-for="(item,index) in originList">
        <swiper-item class="content-wrapper swiper-item" :key="item.id">
          <view class="content-wrapper video-box">

            <video :id="'video'+index" class="content-wrapper" v-if="index===showVideoIndex" :src="item.playurl"
                   :autoplay="false" :controls="true" :custom-cache="false" :loop="false"
                   :enable-play-gesture="true" :enable-progress-gesture="true" :http-cache="true" play-btn-position="center"
                   :show-center-play-btn="true"
                   :poster="item.picurl"
            >

            </video>

            <template v-if="index!==showVideoIndex">

              <video v-if="index===showVideoIndex-1" :id="'video'+index" class="content-wrapper" :src="item.playurl"
                     :autoplay="false" play-btn-position="center" :poster="item.picurl">
              </video>

              <video v-if="index===showVideoIndex+1" :id="'video'+index" class="content-wrapper" :src="item.playurl"
                     :autoplay="false" play-btn-position="center" :poster="item.picurl">
              </video>


            </template>

            <!-- 文本标题 -->
            <view class="video-text">
              <text class="tips">{{ index + 1 }} / {{ originList.length }} {{ item.title }}</text>
            </view>
          </view>

        </swiper-item>
      </template>
    </swiper>

    <view class="fixed-right">
      <uni-grid :column="4" :highlight="true">
        <uni-grid-item v-for="(item, index) in list" :index="index" :key="index">
          <view class="grid-item-box" @click="changeGrid(index)">
            <uni-icons :type="item.type" :size="34" color="#fff"/>
            <text class="fixed-right-text">{{ item.text }}</text>
          </view>
        </uni-grid-item>
      </uni-grid>
    </view>

    <uni-popup ref="popup" border-radius="10px 10px 0 0">
      <view class="popup-container">
        <text>底部弹出 Popup 自定义圆角</text>
      </view>
    </uni-popup>
  </view>
</template>

<script>

import {uuid} from "@/utils/tools";

const videoContexts = []
let cacheList = []
export default {
  data() {
    return {

      originList: [], // 源数据
      originList2: [], // 源数据
      showVideoIndex: 0, //控制video是否渲染

      page: 1, // 视频分页
      pageSize: 10,


      list: [
        {
          text: '播放',
          badge: '0',
          type: "heart-filled"
        }, {
          text: '暂停',
          badge: '0',
          type: "heart-filled"
        }, {
          text: '停止',
          badge: '0',
          type: "heart-filled"
        }, {
          text: 'Grid 1',
          badge: '0',
          type: "heart-filled"
        },
        {
          text: 'Grid 2',
          badge: '1',
          type: "hand-up-filled"
        },
        {
          text: 'Grid 3',
          badge: '99',
          type: "chat-filled"
        },
        {
          text: 'Grid 4',
          badge: '2',
          type: "redo-filled"
        },

      ],

      disableTouch: false,
      currentIndex: 0,
      autoplay: true,

    }
  },

  onLoad() {
    this.getVideoList()
  },

  computed: {
    videoContext() {
      return videoContexts[this.showVideoIndex]
    },
  },


  methods: {


    /* 获取视频数据 */
    getVideoList() {

      uni.request({
        url: 'https://api.apiopen.top/api/getMiniVideo?page=' + this.page + '&pageSize=' + this.pageSize, // 请求数据接口
        data: {},
        success: (resData) => {

          let res = JSON.parse(JSON.stringify(resData))
          res.data.result.list.forEach(item => item.id = uuid())

          if (res.data.code === 200) {

            if (this.page === 1) {
              this.originList = [...this.originList, ...res.data.result.list]
              this.setVideoShow(0)
              this.setVideoContext(0)
              this.$nextTick(() => {
                this.videoContext.play()
              })
            } else {
              this.$nextTick(() => {
                this.originList = [...this.originList, ...res.data.result.list];
              });

            }

            this.page++
          }
        }
      })

    },
    updated() {
      if (cacheList.length === 0) return
      let data = cacheList.splice(0, 3)
      this.$nextTick(() => {
        this.originList = [...this.originList, ...data];
      });
    },

    setVideoContext(current) {

      try {
        if (videoContexts.length === current) {
          let videoId = 'video' + current
          let videoContext = uni.createVideoContext(videoId)
          videoContexts.push(videoContext)
        }
      } catch (err) {
        console.log('err', err)
      }

    },

    setVideoShow(current) {
      if (current === 0) {
        this.$set(this.originList, current, {...this.originList[current], show: true});
        this.$set(this.originList, current + 1, {...this.originList[current + 1], show: true});
        this.$set(this.originList, current + 2, {...this.originList[current + 2], show: true});
      } else {
        let heideIndex = this.originList.findIndex(item => !item.show);
        if (heideIndex !== -1) {
          console.log('setShow-ok')
          this.$nextTick(() => {
            this.$set(this.originList, heideIndex, {...this.originList[heideIndex], show: true});

          })
        }
      }

    },

    changePlay(current, type) {

      if (type === 'toPre') {
        let len = this.originList.length
        try {
          if (current !== len) {
            videoContexts[current + 1].pause();
          }
          videoContexts[current].play();
        } catch (error) {

          console.error('01:捕获到错误:', error);
        }

      } else if (type === 'toNext') {

        try {
          videoContexts[current - 1].pause()
          videoContexts[current].play();
        } catch (error) {
          this.autoplay = false
          console.error('02:捕获到错误:', current, error);

        }

      }


    },

    animationfinish({detail: {current}}) {
      // 向下一个滑动
      if (current > this.showVideoIndex) {
        this.showVideoIndex = current;
        this.changePlay(current, 'toNext')
      }
      // 向上一个滑动
      else {
        this.showVideoIndex = current;
        this.changePlay(current, 'toPre')
      }

      this.disableTouch = false
    },

    swiperChanged({detail: {current}}) {
      this.disableTouch = true
      // 向下一个滑动
      if (current > this.showVideoIndex) {
        let updateNum = ((this.page - 1) * this.pageSize) - 2
        let currentNum = current + 1
        if (currentNum === updateNum) {
          console.log('更新数据')
          this.getVideoList()
        }

        // this.updated()
        this.setVideoShow(current)
        this.$nextTick(() => {
          this.setVideoContext(current)
        })

      }

    },


    changeGrid(index) {
      console.log('changeGrid', index)

    },

  }
}
</script>

<style scoped>
.page-swiper {
  width: 750rpx;
  display: flex;
  flex-direction: column;
  flex: 1;
  /* #ifndef APP-NVUE */
  height: 100vh;
  /* #endif */
}

.content-wrapper {
  width: 750rpx;
  display: flex;
  flex-direction: column;
  flex: 1;
}

.swiper-item {
  background-color: #000000;

}

.video-box {
  position: relative;
  background-color: #000000;
}


/*---------------------------------------------*/
.video-text {
  position: absolute;
  width: 700rpx;
  bottom: 150rpx;
  z-index: 9999;
  margin-left: 50rpx;
}

.tips {
  width: 560rpx;
  font-size: 26rpx;
  color: #ffffff;
}

/*-------------------------------------------*/
.fixed-right {
  position: fixed;
  right: 30rpx;
  bottom: 200px;
  z-index: 100;

}

.fixed-right-text {
  font-size: 12px;
  color: #fff;
}

.grid-item-box {
  padding: 4px;
  display: flex;
  margin-bottom: 10px;
  /* #ifndef APP-NVUE */
  flex-direction: column;
  /* #endif */

}

.popup-container {
  width: 750rpx;
  height: 520px;
  background-color: #fff;
}

.picurl-box {
  width: 750rpx;
  flex: 1;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 100;
  display: flex;
  align-items: center;
  justify-content: center;
}

.picurl-img {

}

.icon-play {

  width: 750rpx;
  flex: 1;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  z-index: 100;
  display: flex;
  justify-content: center;
  align-items: center;
}
</style>
