<template>
  <view style="width: 750rpx;display:flex;flex:1;flex-direction:column; background-color:red;">
    <!--swiper实现整屏划动播放视频-->
    <template >
      <swiper class="content-wrapper" style="background-color:royalblue;" :circular="circular" :disable-touch="disableTouch" vertical :duration="200" @change="changed">
        <template v-for="(item,index) in displaySwiperList">
          <swiper-item class="content-wrapper">
            <view class="content-wrapper video-box" v-if="index===showVideoIndex">
              <video class="content-wrapper" :src="item.src" :autoplay="true" :controls="true"
                     :custom-cache="false" :loop="false" :enable-play-gesture="true" :enable-progress-gesture="true"
                     :show-center-play-btn="true">
              </video>

              <!-- 文本标题 -->
              <view class="video-text">
                <text class="tips">{{ currentOriginIndex + 1 }} / {{ originList.length }}</text>
              </view>
            </view>

          </swiper-item>
        </template>
      </swiper>
    </template>

  </view>
</template>

<script>
import {uuid} from "@/utils/tools";


export default {
  data() {
    return {

      originList: [], // 源数据
      displaySwiperList: [], // swiper需要的数据
      currentDisplayIndex: 0, // 用于显示swiper的真正的下标数值只有：0，1，2
      currentOriginIndex: 0, // 记录源数据的下标


      showVideoIndex: 0, //控制video是否渲染
      page: 0, // 视频分页
      num: 0,
      flag: true,

      disableTouch: false,
      circular: false
    }
  },
  onLoad() {
    this.getPageID()
  },

  methods: {

    /* 生成随机的 pageID */
    getPageID() {
      let pageID = Math.floor(Math.random() * (10 - 1 + 1) + 1);
      // console.log('pageID', pageID)
      this.getVideoList(pageID)
    },
    /* 获取视频数据 */
    getVideoList() {
      let data = [
        {src: 'https://minivideo.xiu123.cn/original/ef89ed0de4e644c9bc7cda9f47bbe347/da0c8ff-17cb63cd142.mp4'},

        {src: 'https://minivideo.xiu123.cn/original/6f6953cbef3442abac1b3f674350da58/116c7a43-17ceae3c8f3.mp4'},

        {src: 'https://minivideo.xiu123.cn/original/fa40b5e9e415435fab14d8c4f279a742/20fdc9eb-17d12597c7d.mp4'},

        {src: 'https://minivideo.xiu123.cn/original/ee17c0546f2d4a83b9cca3c7adc076f5/1f7eebd-17cea9d8f78.mp4'},

        {src: 'https://minivideo.xiu123.cn/original/bcd3baf4ecf0483eb29029a41aafd63d/1eac7c0a-17cd8c270d1.mp4'},

      ]

      data.forEach((item, index) => {
        //取源数据的部分属性组合成新的数组
        this.originList.push({
          src: item.src,
          id: uuid(),
        })
      })
      //解决首次加载页面的时候没有画面的问题
      if (this.flag) {
        this.flag = false
        this.initSwiperData(0)
      }

    },

    changed({detail: {current}}) {
      this.showVideoIndex = current;
      const diff = this.currentDisplayIndex - current;
      const originListLength = this.originList.length;

      if ([2, -1].includes(diff)) {

        console.log('向上一个滑动，更新数据')
        this.currentOriginIndex = (this.currentOriginIndex + 1) % originListLength;
        this.currentDisplayIndex = (this.currentDisplayIndex + 1) % 3;
        this.initSwiperData();

      } else if ([-2, 1].includes(diff)) {

        console.log('向下一个滑动，更新数据')
        this.currentOriginIndex = (this.currentOriginIndex - 1 + originListLength) % originListLength;
        this.currentDisplayIndex = (this.currentDisplayIndex - 1 + 3) % 3;
        this.initSwiperData();

      }

      // 控制循环播放的开关
      this.circular = !(this.currentOriginIndex === 0 || this.currentOriginIndex === originListLength - 1);

    },

    initSwiperData() {
      const originListLength = this.originList.length;
      const currentDisplayIndex = this.currentDisplayIndex;
      let originIndex = this.currentOriginIndex
      const displayList = [];
      const prevDisplayIndex = currentDisplayIndex === 0 ? 2 : currentDisplayIndex - 1;
      const nextDisplayIndex = currentDisplayIndex === 2 ? 0 : currentDisplayIndex + 1;
      displayList[prevDisplayIndex] = this.originList[originIndex === 0 ? originListLength - 1 : originIndex - 1];
      displayList[currentDisplayIndex] = this.originList[originIndex];
      displayList[nextDisplayIndex] = this.originList[originIndex === originListLength - 1 ? 0 : originIndex + 1];
      this.displaySwiperList = displayList;
    },
  }
}
</script>

<style scoped>

.content-wrapper {
  width: 750rpx;
  display: flex;
  flex-direction: column;
  flex: 1;
}

.video-box {
  position: relative;
}

.video-text {
  position: absolute;
  width: 700rpx;
  bottom: 150rpx;
  z-index: 9999;
  margin-left: 50rpx;
}

.tips {
  width: 560rpx;
  font-size: 26rpx;
  color: #ffffff;
}
</style>
