<template>

  <view class="page-swiper">

    <view class="navbar" @click="backPage" style="width:40px;height: 40px; position: fixed;top: 30px;left: 10rpx;z-index: 999">
      <uni-icons type="left" size="30" color="#fff"></uni-icons>
    </view>


    <swiper class="content-wrapper" vertical :render-whole="true" :autoplay="false" :circular="false" :touchable="false"
            @change="swiperChanged" @animationfinish="animationfinish">

      <template v-for="(item,index) in originList">
        <swiper-item class="content-wrapper" :key="item.id">
          <view class="content-wrapper video-box">
            <video :id="'video'+index" class="content-wrapper" v-if="index===showVideoIndex" :src="item.playurl" :controls="true"
                   :enable-play-gesture="true" :enable-progress-gesture="true"
                   :poster="item.picurl"
            >

            </video>

            <template v-if="index!==showVideoIndex">
              <video v-if="index===showVideoIndex-1" :id="'video'+index" class="content-wrapper" :src="item.playurl" :poster="item.picurl"></video>
              <video v-if="index===showVideoIndex+1" :id="'video'+index" class="content-wrapper" :src="item.playurl" :poster="item.picurl"></video>
            </template>


            <!-- 文本标题 -->
            <view class="bottom-desc">
              <text class="tips">{{ index + 1 }} / {{ originList.length }}</text>
              <text class="bottom-desc-title">{{ item.title }}</text>

            </view>

          </view>

        </swiper-item>
      </template>
    </swiper>

  </view>
</template>

<script>


const uuid = () => {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const videoContexts = []


export default {
  data() {
    return {

      originList: [],
      showVideoIndex: 0, //控制video是否渲染

      page: 1, // 视频分页
      pageSize: 8,

      direction: -90
    }
  },

  onLoad() {
    this.getVideoList()

  },

  onUnload() {
    this.videoContext.stop()

  },

  computed: {
    videoContext() {
      let videoId = 'video' + this.showVideoIndex
      this.id = this.originList[this.showVideoIndex].id
      return videoContexts.find(item => item.videoId === videoId).handler
    },
  },

  methods: {
    backPage() {
      uni.navigateBack()
    },

    /* 获取视频数据 */
    getVideoList() {

      uni.request({
        url: 'https://api.apiopen.top/api/getMiniVideo?page=' + this.page + '&pageSize=' + this.pageSize, // 请求数据接口
        data: {},
        success: (resData) => {
          let res = JSON.parse(JSON.stringify(resData))
          res.data.result.list.forEach(item => item.id = uuid())
          // console.log(res.data.result);
          if (res.data.code === 200) {

            if (this.page === 1) {
              this.originList = [...this.originList, ...res.data.result.list]
              this.setVideoContext(0)
              this.$nextTick(() => {
                setTimeout(()=>{
                  this.videoContext.play()
                },100)
              })

            } else {
              this.$nextTick(() => {
                this.originList = [...this.originList, ...res.data.result.list];
              });

            }

            this.page++
          }
        }
      })
    },

    setVideoContext(current) {
      this.$nextTick(() => {
        let videoId = 'video' + current
        let videoContext = uni.createVideoContext(videoId)
        let hasAlready = videoContexts.find(item => item.videoId === videoId)
        if (hasAlready) return
        videoContexts.push({videoId: videoId, handler: videoContext})

      })

    },

    // 自动播放/暂停视频
    changePlay(current, type) {

      let videoId = 'video' + current
      let backVideoId = 'video' + (current + 1)
      let frontVideoId = 'video' + (current - 1)

      if (type === 'toPrev') {

        let backVideoVideoContext = videoContexts.find(item => item.videoId === backVideoId)

        if (backVideoVideoContext) {
          backVideoVideoContext.handler.pause()
        }

        this.setVideoContext(current)

        setTimeout(()=>{
          videoContexts.find(item => item.videoId === videoId).handler.play()
        },100)

      } else if (type === 'toNext') {

        let frontVideoContext = videoContexts.find(item => item.videoId === frontVideoId)

        if (frontVideoContext) {
          frontVideoContext.handler.pause()
        }

        this.setVideoContext(current)
        setTimeout(()=>{
          videoContexts.find(item => item.videoId === videoId).handler.play()
        },100)

      }

    },

    animationfinish({detail: {current}}) {
      // 向下一个滑动
      if (current > this.showVideoIndex) {
        this.showVideoIndex = current;
        this.changePlay(current, 'toNext')
      }
      // 向上一个滑动
      else if (current < this.showVideoIndex) {
        this.showVideoIndex = current;
        this.changePlay(current, 'toPrev')
      }
    },

    swiperChanged({detail: {current}}) {

      this.setVideoContext(current)
      // 向下一个滑动
      if (current > this.showVideoIndex) {
        let updateNum = ((this.page - 1) * this.pageSize) - 2
        let currentNum = current + 1
        if (currentNum >= updateNum) {
          console.log('更新数据')
          // this.getVideoList()
        }
      }
    },

  }
}
</script>

<style scoped>

.page-swiper {
  /* #ifndef APP-NVUE */
  display: flex;
  flex-direction: column;
  /* #endif */
  width: 750rpx;
  flex: 1;

}

.content-wrapper {
  width: 750rpx;
  display: flex;
  flex-direction: column;
  flex: 1;
}


.video-box {
  /* #ifndef APP-NVUE */
  display: flex;
  flex-direction: column;
  /* #endif */
  background-color: #000000;
  position: relative;
  justify-content: center;
  align-items: center;
}


/*---------------------------------------------*/
.bottom-desc {
  position: absolute;
  width: 640rpx;
  bottom: 60px;
  z-index: 9999;
  margin-left: 30rpx;
  margin-right: 80rpx;
}

.tips {
  font-size: 18px;
  color: #ffffff;
}

.bottom-desc-title {
  font-size: 18px;
  color: #ffffff;

}

</style>
